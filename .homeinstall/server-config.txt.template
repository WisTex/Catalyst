###############################################
### MANDATORY - database password #############
#
# Please give your database password
# It is better to not use blanks inside the password.
#   Example: db_pass=pass_word_with_no_blanks_in_it
db_pass=

###############################################
### MANDATORY - let's encrypt #################
#
# Encrypted communication via secure HTTP (HTTPS)is required.
# This script automates installation of an SSL certificate from
# Let's Encrypt (https://letsencrypt.org)
#
# Please give the domain name of your website
#
#     Example: my.cooldomain.org
#     Example: cooldomain.org
#
# You might use "localhost" for a LOCAL TEST installation.
# This is usefull if you want to debug the server inside a VM.
#
#     Example: localhost
#
# Email is optional if you use "localhost".
#
#
le_domain=
le_email=

###############################################
### OPTIONAL - Webserver choice ###############
#
# Please indicate if you want to choose Nginx
# or Apache as your web server
#
# Valid strings are nginx or apache (lower case),
# any other will stop the setup script.
# 
webserver=apache


###############################################
###      OPTIONAL - DDNS CONFIGURATION      ###
#
# A set of scripts is available in the "ddns" folder.
# Each one is intended for a specific provider (FreeDNS, Gandi LiveDNS, selfHOST.de)
# You can set ddns_provider to match one of them.
#
# "freedns" will run freedns.sh if you choose FreeDNS (https://freedns.afraid.org)
# "gandi" will run gandi.sh if you choose Gandi LiveDNS (https://gandi.net)
# "selfhost" will run selfhost.sh if you choose selfHOST.de (https://selfost.de)
#
#    Example : ddns_provider=gandi
#
ddns_provider=
#
# Feel free to add scripts for other providers if you feel you can do that!

###############################################
### OPTIONAL - Backup to external device ######
#
# The script can use an external device for the daily backup.
# The file system of the device (USB stick for example) must be compatible with
#
# - encrypted LUKS + ext4, or
# - ext4
#
# You should test to mount the device before you run the script
# (server-setup.sh).
# How to find your (pluged-in) devices?
#
#     fdisk -l
#
# Provided your device was listed as is /dev/sdb1. You could check with:
#
#     blkid | grep /dev/sdb1
#
# Try to decrypt
# (You might install cryptsetup befor using apt-get install.
#
#     apt-get install cryptsetup
#     cryptsetup luksOpen /dev/sdb1 cryptobackup
#
# Try to mount
# You might create the directory /media/hubzilla_backup it it does not exist
# using mkdir.
#
#     mkdir /media/hubzilla_backup
#     mount /dev/mapper/cryptobackup /media/hubzilla_backup
# 
# Unmounting device goes like this
# 
#     umount /media/hubzilla_backup
#     cryptsetup luksClose cryptobackup
#
# To check if still mounted
#
#     lsof /media/hubzilla_backup
#
# If you leave the following parameters
#
# - "backup_device_name" and
# - "backup_device_pass"
#
# empty the script will create daily backups on the internal disk (which could
# save you as well).
#
#   Example: backup_device_name=/dev/sdc1
#
# Leave "backup_device_pass=" empty if the external device is not encrypted.
#
backup_device_name=
backup_device_pass=


###############################################
### OPTIONAL - do not mess with things below ##
#              (...if you are not certain)
#
# Usually you are done here
# Everything below is OPTIONAL
#
###############################################
#
# Database for your hub/instance
# If left empty, both your database and user will be named streams (name of the repository)
# Use custom name, at least fo the database, if you plan to run more than one hub/instance on the same server
#
website_db_name=
website_db_user=
website_db_pass=$db_pass
# 
#
# Password for package mysql-server
#   Example: mysqlpass=aberhallo
#   Example: mysqlpass="aber hallo has blanks in it"
#
mysqlpass=$db_pass
